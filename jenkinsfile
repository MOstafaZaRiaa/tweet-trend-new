def registry = 'https://zariaa.jfrog.io'

pipeline {
    agent { label 'maven' }
    environment {
        PATH = "/opt/apache-maven-3.9.4/bin:$PATH"
    }
    stages {
        stage("build") {
            steps {
                echo "------- build started --------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "---------build completed ----------"
            }
        }
        stage("test") {
            steps {
                echo "--------unit test started ---------"
                sh 'mvn surefire-report:report'
                echo "---------unit test completed   -------"
            }
        }
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar-scanner' // sonar scanner name should be the same as defined in the tools
            }
            steps {
                withSonarQubeEnv('sonarqube-server') { // SonarQube server name
                    sh "${scannerHome}/bin/sonar-scanner" // Communicate with SonarQube server and send the analysis report
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage("Jar Publish") {
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'
                    def server = Artifactory.newServer url: registry + "/artifactory", credentialsId: "jfrogartifact-credentials"
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}"
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "jarstaging/(*)",
                                "target": "tweet-trend-libs-release-local/{1}",
                                "flat": "false",
                                "props": "${properties}",
                                "exclusions": [ "*.sha1", "*.md5" ]
                            }
                        ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                    echo '<--------------- Jar Publish Ended --------------->'
                }
            }
        }
    }
}
